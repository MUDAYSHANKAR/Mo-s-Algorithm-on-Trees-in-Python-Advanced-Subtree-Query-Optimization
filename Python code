import sys
from math import isqrt
from collections import defaultdict

class Query:
    def __init__(self, l, r, block, original_index):
        self.l = l
        self.r = r
        self.block = block
        self.original_index = original_index

def solve_mo_on_tree(graph, node_values, queries):
    num_nodes = len(graph)
    start_time = [-1] * num_nodes
    end_time = [-1] * num_nodes
    flat_array = [-1] * num_nodes
    
    time_counter = 0
    
    order = []
    visited_dfs = [False] * num_nodes
    stack = [queries[0][0]] # Start DFS from the root of the first query, assuming connected graph.
    visited_dfs[queries[0][0]] = True
    parent_map = {queries[0][0]: -1}

    while stack:
        u = stack.pop()
        order.append(u)
        for v in graph[u]:
            if not visited_dfs[v]:
                visited_dfs[v] = True
                parent_map[v] = u
                stack.append(v)

    for u in reversed(order):
      if parent_map[u] != -1:
         graph[u].remove(parent_map[u])

    stack = [queries[0][0]]
    visited_hld = [False] * num_nodes

    while stack:
        u = stack.pop()
        if not visited_hld[u]:
          visited_hld[u] = True
          start_time[u] = time_counter
          flat_array[time_counter] = u
          time_counter += 1
          stack.append(u)
          for v in graph[u]:
              stack.append(v)
        else:
          end_time[u] = time_counter - 1


    flat_values = [node_values[node] for node in flat_array]

    block_size = isqrt(num_nodes)
    mo_queries = []
    for i, (u,) in enumerate(queries):
        l, r = start_time[u], end_time[u]
        if l > r: continue
        block = l // block_size
        mo_queries.append(Query(l, r, block, i))

    mo_queries.sort(key=lambda q: (q.block, q.r if q.block % 2 == 0 else -q.r))
    
    answers = [-1] * len(queries)
    freq = defaultdict(int)
    unique_count = 0
    
    current_l, current_r = 0, -1

    def add(idx):
        nonlocal unique_count
        val = flat_values[idx]
        if freq[val] == 0:
            unique_count += 1
        freq[val] += 1

    def remove(idx):
        nonlocal unique_count
        val = flat_values[idx]
        freq[val] -= 1
        if freq[val] == 0:
            unique_count -= 1
            
    for q in mo_queries:
        while current_l > q.l:
            current_l -= 1
            add(current_l)
        while current_r < q.r:
            current_r += 1
            add(current_r)
        while current_l < q.l:
            remove(current_l)
            current_l += 1
        while current_r > q.r:
            remove(current_r)
            current_r -= 1
        answers[q.original_index] = unique_count
        
    return answers


if __name__ == '__main__':
    sys.setrecursionlimit(200000)

    num_nodes = 9
    edges = [
        (0, 1), (0, 2),
        (1, 3), (1, 4),
        (2, 5),
        (4, 6), (4, 7),
        (7, 8)
    ]
    node_values = [10, 20, 30, 10, 20, 10, 40, 50, 40]

    graph = [[] for _ in range(num_nodes)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
        
    # Queries are tuples, each containing the root of the subtree to query.
    # The queries are answered in the context of the entire tree and its values.
    subtree_queries = [
        (4,), # Subtree of 4: {4,6,7,8}. Values: {20,40,50,40}. Unique: {20,40,50} -> 3
        (0,), # Subtree of 0: all nodes. Values: {10,20,30,10,20,10,40,50,40}. Unique: {10,20,30,40,50} -> 5
        (2,), # Subtree of 2: {2,5}. Values: {30,10}. Unique: {10,30} -> 2
        (7,), # Subtree of 7: {7,8}. Values: {50,40}. Unique: {40,50} -> 2
        (3,)  # Subtree of 3: {3}. Values: {10}. Unique: {10} -> 1
    ]
    
    print("--- Solving Subtree Queries with Mo's Algorithm ---")
    results = solve_mo_on_tree(graph, node_values, subtree_queries)

    print("\n--- Results ---")
    for i, (u,) in enumerate(subtree_queries):
        print(f"Query for subtree of node {u}: {results[i]} unique values.")
        
    # Expected Output:
    # Query for subtree of node 4: 3 unique values.
    # Query for subtree of node 0: 5 unique values.
    # Query for subtree of node 2: 2 unique values.
    # Query for subtree of node 7: 2 unique values.
    # Query for subtree of node 3: 1 unique values.
